package main

import (
	"database/sql"
	"fmt"
	"github.com/gin-gonic/gin"
	_ "github.com/lib/pq"
	"net/http"
	"strconv"
)

func main() {
	CreateTable()
	r := gin.Default()

	// Пополнение
	r.POST("/additional", func(c *gin.Context) {
		additional(c)
	})

	//Списание
	r.POST("/withdrawal", func(c *gin.Context) {
		withdrawl(c)
	})

	//Баланс
	r.GET("/balance", func(c *gin.Context) {
		balance(c)
	})

	r.Run()
}

func balance(c *gin.Context) {
	userId, err := strconv.ParseInt(c.Query("userId"), 0, 64)

	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":     "Неверный идентификатор пользователя",
			"operation": "Получение текущего баланса пользователя.",
		})

		return
	}

	balance := GetUserBalance(int(userId))

	c.JSON(http.StatusOK, gin.H{
		"balance":   balance,
		"operation": "Получение текущего баланса пользователя.",
	})
}

func additional(c *gin.Context) {
	userId, err := strconv.ParseInt(c.PostForm("userId"), 0, 64)

	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":     "Неверный идентификатор пользователя",
			"operation": "Пополнение баланса.",
		})

		return
	}

	sum, err := strconv.ParseFloat(c.PostForm("sum"), 64)

	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":     "Неверная сумма зачисления.",
			"operation": "Пополнение баланса.",
		})

		return
	}

	if CreateRow(int(userId), sum, "additional") {
		c.JSON(http.StatusOK, gin.H{
			"balance":   GetUserBalance(int(userId)),
			"operation": "Пополнение баланса.",
			"userId":    userId,
			"sum":       sum,
		})

		return
	}

	c.JSON(http.StatusOK, gin.H{
		"error":     "Ошибка при зачислении средств.",
		"operation": "Пополнение баланса.",
	})
}

func withdrawl(c *gin.Context) {
	userId, err := strconv.ParseInt(c.PostForm("userId"), 0, 64)

	if err != nil {
		c.JSON(http.StatusOK, gin.H{
			"error":     "Неверный идентификатор пользователя",
			"operation": "Списания средств с баланса.",
		})

		return
	}

	sum, err := strconv.ParseFloat(c.PostForm("sum"), 64)

	if err != nil {
		c.JSON(http.StatusOK, gin.H{
			"error":     "Неверная сумма списания.",
			"operation": "Списания средств с баланса.",
		})

		return
	}

	balance := GetUserBalance(int(userId))

	if balance-sum < 0 {
		c.JSON(http.StatusOK, gin.H{
			"error":     "Недостаточно средств для списания.",
			"operation": "Списания средств с баланса.",
		})

		return
	}

	if CreateRow(int(userId), sum, "withdrawl") {
		c.JSON(http.StatusOK, gin.H{
			"balance":   GetUserBalance(int(userId)),
			"operation": "Списания средств с баланса.",
			"userId":    userId,
			"sum":       sum,
		})

		return
	}

	c.JSON(http.StatusOK, gin.H{
		"error":     "Ошибка при списании средств.",
		"operation": "Списания средств с баланса.",
	})
}

func GetUserBalance(userId int) float64 {
	db := getDb()

	var sqlStatement string

	sqlStatement = `SELECT SUM, OPERATION FROM BANK WHERE USER_ID = $1 ORDER BY ID`
	rows, err := db.Query(sqlStatement, userId)

	if err != nil {
		panic(err)
	}

	balance := 0.0

	for rows.Next() {
		var sum float64
		var operation string

		err = rows.Scan(&sum, &operation)

		if operation == "additional" {
			balance += sum
		}

		if operation == "withdrawl" {
			balance -= sum
		}
	}

	return balance
}

func CreateTable() {
	db := getDb()

	_, err := db.Exec(`CREATE TABLE IF NOT EXISTS BANK (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, USER_ID INT, SUM INT, OPERATION VARCHAR(255));`)

	if err != nil {
		panic(err)
	}
}

func CreateRow(userId int, sum float64, operation string) bool {
	db := getDb()

	var sqlStatement string

	sqlStatement = `INSERT INTO BANK (USER_ID, SUM, OPERATION) VALUES ($1, $2, $3)`
	_, err := db.Exec(sqlStatement, userId, sum, operation)

	if err != nil {
		return false
	}

	return true
}

func getDb() *sql.DB {
	postgresInfo := fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s sslmode=disable",
		"postgres", 5432, "golang", "golang", "golang")

	db, err := sql.Open("postgres", postgresInfo)

	if err != nil {
		panic("Ошибка при подключении к бд!")
	}

	return db
}
